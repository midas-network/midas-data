name: Build Midas release files and create a release
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'src/ontology/imports/**_import.owl'
      - 'src/ontology/imports/seed.txt'
      - 'src/ontology/midas-data-edit.owl'

jobs:
  build:
    runs-on: ubuntu-latest
    container: obolibrary/odkfull:latest
    strategy:
      max-parallel: 1
    steps:
      - name: Get current date
        id: date
        shell: bash
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"
      
      - name: Checkout main branch
        uses: actions/checkout@v2

      - name: work around permission issue
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Install zip
        run: |
          apt-get update -qq
          apt-get install -y zip unzip
  
      - name: Update release files
        run: cd src/ontology/ && make ROBOT_ENV='ROBOT_JAVA_ARGS=-Xms16G -Xmx128G' GITHUB_ACTION=true all -B
        env:
          TODAY: ${{ steps.date.outputs.date }}
      
      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          author_name: matentzn
          author_email: nicolas.matentzoglu@gmail.com
          message: 'Update release files'
          add: '*.owl'
          tag: 'v${{ steps.date.outputs.date }} --force'
          tag_push: '--force'
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write          
    steps:
      - name: Checkout code
        uses: actions/checkout@main   
      
      - name: Get current date
        id: date
        shell: bash
        run: |
            echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"
        
      - name: Delete existing release if it already exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # gh CLI reads GH\_TOKEN
        run: |
          TAG="v${{ steps.date.outputs.date }}"
          echo "Checking for existing release $TAG"
          # gh is pre-installed on GitHub-hosted runners
          if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" \
               >/dev/null 2>&1; then
            echo "Deleting release $TAG (and its tag)â€¦"
            gh release delete "$TAG" --yes --cleanup-tag \
              --repo "$GITHUB_REPOSITORY"            # --cleanup-tag removes the tag too :contentReference[oaicite:0]{index=0}
          else
            echo "No existing release to delete."
          fi

      
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.date.outputs.date }}
          release_name: Release ${{ steps.date.outputs.date }}
          draft: false
          prerelease: false
